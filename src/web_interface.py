import streamlit as st
import uuid
import logging
from datetime import datetime
from pathlib import Path
import yaml
from src.ai_assistant import AIAssistant
from src.document_processor import DocumentProcessor
from src.embeddings_manager import EmbeddingsManager
from src.vector_store import VectorStore

logger = logging.getLogger(__name__)


def load_config(config_path: str = "config.yaml") -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}


def init_assistant() -> AIAssistant:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    if 'assistant' not in st.session_state:
        config = load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        embeddings_manager = EmbeddingsManager(
            model_name=config["embeddings"]["model_name"],
            device="cpu"
        )

        vector_store = VectorStore(
            embeddings_manager=embeddings_manager,
            persist_directory=config["vector_store"]["persist_directory"]
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if not vector_store.load_vector_store():
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            st.stop()

        st.session_state.assistant = AIAssistant(vector_store, config)

    return st.session_state.assistant


def init_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())

    if 'messages' not in st.session_state:
        st.session_state.messages = []

    if 'first_visit' not in st.session_state:
        st.session_state.first_visit = True


def display_chat_message(message: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if message["role"] == "assistant" and "sources" in message:
            if message["sources"]:
                with st.expander("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
                    for i, source in enumerate(message["sources"], 1):
                        st.write(f"{i}. {source}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω—É
    st.set_page_config(
        page_title="LAI - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        page_icon="üë®‚Äçüíª",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_session()
    assistant = init_assistant()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.title("LAI Assistant")
        st.markdown("**–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º**")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        st.markdown("---")
        st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏")
        session_info = assistant.context_manager.get_session_info(st.session_state.session_id)
        if session_info["exists"]:
            st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–π:** {session_info['interactions_count']}")
            st.write(f"**–ù–∞—á–∞–ª–æ:** {session_info['created_at'].strftime('%H:%M')}")

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            assistant.context_manager.clear_context(st.session_state.session_id)
            st.session_state.messages = []
            st.rerun()

        # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
        st.markdown("""
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:**
        - –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        - –ü–æ–∏—Å–∫ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        - –ü–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
        - –£–∫–∞–∑–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        **–°–æ–≤–µ—Ç:** –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π –≤ –æ—Ç–¥–µ–ª–µ –ø—Ä–æ–¥–∞–∂.
        """)

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    st.title("üí¨ –ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if st.session_state.first_visit:
        with st.chat_message("assistant"):
            st.markdown("""
            üëã –ü—Ä–∏–≤–µ—Ç! –Ø LAI ‚Äî –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ç–¥–µ–ª–µ –ø—Ä–æ–¥–∞–∂.

            –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
            - –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º
            - –ü—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–¥–∞–∂
            - –†–∞–±–æ—Ç–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            - –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö

            –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π!
            """)
        st.session_state.first_visit = False

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        display_chat_message(message)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = {"role": "user", "content": prompt}
        st.session_state.messages.append(user_message)
        display_chat_message(user_message)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"):
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                response_data = assistant.generate_response(prompt, st.session_state.session_id)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
            st.markdown(response_data["response"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            if response_data["sources"]:
                with st.expander("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
                    for i, source in enumerate(response_data["sources"], 1):
                        st.write(f"{i}. {source}")

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø–æ —Ç–µ–º–µ
            if not response_data["is_sales_related"]:
                st.warning("‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        assistant_message = {
            "role": "assistant",
            "content": response_data["response"],
            "sources": response_data["sources"]
        }
        st.session_state.messages.append(assistant_message)


if __name__ == "__main__":
    main()
