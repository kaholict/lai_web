#!/usr/bin/env python3

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–ø–ª–æ—è –≤ Streamlit Cloud
"""

import logging
import sys
import os
import argparse
from pathlib import Path
import streamlit as st

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))


def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )


def setup_mode():
    """–†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from src.config_manager import ConfigManager
        from src.document_processor import DocumentProcessor
        from src.embeddings_manager import EmbeddingsManager
        from src.vector_store import VectorStore

        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

        config = ConfigManager()
        docs_path = Path("data/raw")

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
        docs_path.mkdir(parents=True, exist_ok=True)

        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        embeddings_manager = EmbeddingsManager(
            model_name=config.get("embeddings.model_name"),
            device="cpu"
        )

        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
        vector_store = VectorStore(
            embeddings_manager=embeddings_manager,
            persist_directory=config.get("vector_store.persist_directory")
        )

        if not vector_store.load_vector_store():
            print("üìÑ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            processor = DocumentProcessor(
                chunk_size=config.get("document_processing.chunk_size"),
                chunk_overlap=config.get("document_processing.chunk_overlap")
            )

            if docs_path.exists() and any(docs_path.iterdir()):
                documents = processor.process_documents(str(docs_path))
                if documents:
                    vector_store.create_vector_store(documents)
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                else:
                    print("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
            else:
                print("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                from langchain.schema import Document
                dummy_doc = Document(page_content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", metadata={"source": "system"})
                vector_store.create_vector_store([dummy_doc])
        else:
            print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

        print("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def cloud_init():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Streamlit Cloud"""
    try:
        from src.config_manager import ConfigManager
        from src.document_processor import DocumentProcessor
        from src.embeddings_manager import EmbeddingsManager
        from src.vector_store import VectorStore

        config = ConfigManager()
        docs_path = Path("data/raw")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        embeddings_manager = EmbeddingsManager(
            model_name=config.get("embeddings.model_name"),
            device="cpu"
        )

        vector_store = VectorStore(
            embeddings_manager=embeddings_manager,
            persist_directory=config.get("vector_store.persist_directory")
        )

        if not vector_store.load_vector_store():
            logging.info("–í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            processor = DocumentProcessor(
                chunk_size=config.get("document_processing.chunk_size"),
                chunk_overlap=config.get("document_processing.chunk_overlap")
            )

            if docs_path.exists():
                documents = processor.process_documents(str(docs_path))
                if documents:
                    vector_store.create_vector_store(documents)
                    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                else:
                    logging.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    from langchain.schema import Document
                    dummy_doc = Document(page_content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", metadata={"source": "system"})
                    vector_store.create_vector_store([dummy_doc])
            else:
                logging.warning("–ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ –ø—É—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                docs_path.mkdir(parents=True, exist_ok=True)
                from langchain.schema import Document
                dummy_doc = Document(page_content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", metadata={"source": "system"})
                vector_store.create_vector_store([dummy_doc])

        return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def main():
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='LAI Assistant')
    parser.add_argument('--mode', choices=['setup', 'run'], default='run',
                        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, run –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ Streamlit
    if len(sys.argv) > 1 and '--mode' in ' '.join(sys.argv):
        args = parser.parse_args()
        setup_logging()

        if args.mode == 'setup':
            success = setup_mode()
            sys.exit(0 if success else 1)

    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è Streamlit
    setup_logging()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ setup —Ä–µ–∂–∏–º
    if not os.getenv("OPENROUTER_API_KEY") and 'setup' not in sys.argv:
        st.error(
            "‚ùå –ù–µ –∑–∞–¥–∞–Ω API –∫–ª—é—á OpenRouter. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ secrets.toml")
        st.info("üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .streamlit/secrets.toml —Å –≤–∞—à–∏–º API –∫–ª—é—á–æ–º")
        st.stop()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if cloud_init():
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        from src.web_interface import main as web_main
        web_main()
    else:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")


if __name__ == "__main__":
    main()
