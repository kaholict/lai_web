#!/usr/bin/env python3

"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–ø–ª–æ—è –≤ Streamlit Cloud
"""

import logging
import sys
import os
from pathlib import Path
import streamlit as st

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))


def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )


def check_api_key():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞"""
    api_key = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Streamlit secrets
    try:
        if hasattr(st, 'secrets') and st.secrets:
            api_key = st.secrets.get("OPENROUTER_API_KEY")
            if api_key:
                return True
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("OPENROUTER_API_KEY")
    if api_key:
        return True

    return False


def cloud_init():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Streamlit Cloud"""
    try:
        from src.config_manager import ConfigManager
        from src.document_processor import DocumentProcessor
        from src.embeddings_manager import EmbeddingsManager
        from src.vector_store import VectorStore

        config = ConfigManager()
        docs_path = Path("data/raw")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        try:
            embeddings_manager = EmbeddingsManager(
                model_name=config.get("embeddings.model_name", "sentence-transformers/all-MiniLM-L6-v2"),
                device="cpu"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return False

        vector_store = VectorStore(
            embeddings_manager=embeddings_manager,
            persist_directory=config.get("vector_store.persist_directory")
        )

        if not vector_store.load_vector_store():
            logging.info("–í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            processor = DocumentProcessor(
                chunk_size=config.get("document_processing.chunk_size"),
                chunk_overlap=config.get("document_processing.chunk_overlap")
            )

            if docs_path.exists():
                documents = processor.process_documents(str(docs_path))
                if documents:
                    vector_store.create_vector_store(documents)
                    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                else:
                    logging.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    from langchain.schema import Document
                    dummy_doc = Document(page_content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", metadata={"source": "system"})
                    vector_store.create_vector_store([dummy_doc])
            else:
                logging.warning("–ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ –ø—É—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                docs_path.mkdir(parents=True, exist_ok=True)
                from langchain.schema import Document
                dummy_doc = Document(page_content="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", metadata={"source": "system"})
                vector_store.create_vector_store([dummy_doc])

        return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def main():
    setup_logging()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not check_api_key():
        st.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω API –∫–ª—é—á OpenRouter")
        st.info("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
        st.markdown("""
        1. **–î–ª—è Streamlit Cloud**: –î–æ–±–∞–≤—å—Ç–µ `OPENROUTER_API_KEY` –≤ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        2. **–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**: 
           - –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.streamlit/secrets.toml` —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:
           ```
           OPENROUTER_API_KEY = "–≤–∞—à_api_–∫–ª—é—á"
           ```
           - –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è `OPENROUTER_API_KEY`
        """)
        st.markdown("üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞ [openrouter.ai/keys](https://openrouter.ai/keys)")
        st.stop()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if cloud_init():
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        from src.web_interface import main as web_main
        web_main()
    else:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
        st.info("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")


if __name__ == "__main__":
    main()
